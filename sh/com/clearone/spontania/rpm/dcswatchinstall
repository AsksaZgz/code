#!/bin/sh
v_ipOne=""
v_ipTwo=""

function op_get_ip()
{
  v_res=`cat $1 | grep IPADDR | perl -pi -e s+"IPADDR="+""+g`
  echo -e "op_get_ip: $v_res" >> $2 2>>$2
  v_opGetIp=$v_res

  if [ -z $v_res ]
  then
    return 255
  fi

  return 0
}

function op_get_ip_multiple()
{
  v_counter=0
  v_pathNetwork=/etc/sysconfig/network-scripts/ifcfg-eth*
  for i in  $v_pathNetwork
  do
    op_get_ip $i $1
    if [ $? -eq 0 ]
    then
      case $v_counter in
        0)
          v_ipOne=$v_opGetIp
          v_ipTwo=$v_ipOne
          v_counter=1
          ;;
        1)
          v_ipTwo=$v_opGetIp
          v_counter=2
          ;;
        *)
          ;;
      esac
    fi
  done

  if [ "$v_ipOne" = "" ]
  then
    v_pathNetwork=`/sbin/ifconfig $ACTIVE_INTERFACE | grep 'inet addr' | awk '{print $2}' | sed 's/addr://'`
    echo -e "$v_pathNetwork" >> $1 2>>$1
    v_counter=0
    for i in  $v_pathNetwork
    do
      case $v_counter in
        0)
          v_ipOne=$i
          v_ipTwo=$v_ipOne
          v_counter=1
          ;;
        1)
          v_ipTwo=$v_ipOne
          v_counter=2
          ;;
        *)
          ;;
      esac
    done
  fi

  echo -e "op_get_ip_multiple, ip 1: $v_ipOne - ip 2: $v_ipTwo" >> $1 2>> $1
}


function op_get_ip_spontania5()
{
  v_confFile="/etc/.ConfPrivatePublicIP"
  if [ -f $v_confFile ]
  then
    v_counter=0
    for i in `cat /etc/.ConfPrivatePublicIP`
    do
      op_get_ip "/etc/sysconfig/network-scripts/ifcfg-"$i $1
      if [ $? -eq 0 ]
      then
        case $v_nCounter in
          0)
            v_ipOne=$v_opGetIp
            v_ipTwo=$v_ipOne
            v_nCounter=1
            ;;
          1)
            v_ipTwo=$v_opGetIp
            v_nCounter=2
            ;;
          *)
            ;;
        esac
      fi
    done

    if [ "$v_ipOne" = "" ]
    then
      v_pathNetwork=`/sbin/ifconfig $ACTIVE_INTERFACE | grep 'inet addr' | awk '{print $2}' | sed 's/addr://'`
      echo -e "$v_pathNetwork" >> $1 2>> $1
      v_counter=0
      for i in `cat /etc/.ConfPrivatePublicIP`
      do
        case $v_counter in
          0)
            v_ipOne=`/sbin/ifconfig $i | grep 'inet addr' | awk '{print $2}' | sed 's/addr://'`
            v_ipTwo=$v_ipOne
            v_counter=1
            ;;
          1)
            v_ipTwo=`/sbin/ifconfig $i | grep 'inet addr' | awk '{print $2}' | sed 's/addr://'`
            v_counter=2
            ;;
          *)
            ;;
        esac
      done
    fi
  else
    echo -e "INFO: $v_confFile is not available, let's starting another proccess to get an ip address" >> $1 2>> $1
    op_get_ip_multiple $1
  fi

  echo -e "op_get_ip_spontania5, ip 1: $v_ipOne - ip 2: $v_ipTwo" >> $1 2>> $1
}



CD()
{
	if [ ! -d "$1" ]
	then
		exit 1
	fi

	cd $1
}

LN()
{
	ln $1 $2 $3 >> $pinstall/DcsWatchInstall.log 2>&1
}

# RM "seguro"
RM()
{
	if [ "$2" = "/" ] || [ "$2" = "/usr" ] || [ "$2" = "/bin" ] || [ "$2" = "/lib" ]\
		|| [ "$2" = "/lib" ] || [ "$2" = "/usr/local" ] || [ "$2" = "/usr/local/bin" ]\
		|| [ "$2" = "/opt" ] || [ "$2" = "/home" ] || [ "$2" = "/export" ]\
		|| [ "$2" = "/etc" ] || [ "$2" = "/sbin" ] || [ "$2" = "/boot" ] || [ "$2" = "./" ]
	then
		exit 1
	fi

	rm $1 $2
}

CP()
{
	cp $1 $2 $3 >> $pinstall/DcsWatchInstall.log 2>&1
}

# Pregunta con la frase dada por $1 y captura respuesta
strask()
{
	while [ 1 ]
	do
		variable=q
		if [ "$variable" = ? ]
		then
			ECHO -e "$2"
			continue
		elif [ "$variable" = q ] || [ "$variable" = Q ]
		then
			break
		fi
		break
	done

	return $ret
}

AskLogLevel()
{
	WebConf_LogLevel="INFO"
}

AskIP()
{
	WebConf_IP="127.0.0.1"
}

AskControlPort()
{
	WebConf_ControlPort="8087"
}

AskPublicIP()
{
	WebConf_PublicIP="127.0.0.1"
}

AskPublicInterface()
{
	WebConf_PublicIF="eth0:1"
}

AskPartnerIP()
{
	WebConf_PartnerIP="127.0.0.1"
}

AskPartnerPort()
{
	WebConf_PartnerPort="8787"
}

AskControlInterface()
{
	WebConf_ControlIF="eth0"
}

 
AskNuevoIni()
{
	NuevoIni=1
}

Select()
{
	variable=q
}

DumpConfigFileSimple()
{
mkdir -p $1/config

f=`date '+%Y-%m-%d %H:%M'`

## Parte general

v_now=`date +'%F_%H%M%S'`
v_logFile=/root/setupDcswatch0602r7-${v_now}.log

op_get_ip_spontania5 $v_logFile

cat > $1/config/dcswatch-config.xml 2>/dev/null   <<!
<!-- ($f) Configuration file generated by bin/dcswatchinstall -->
<configuration>
        <general>
                <generalparameter id="ipserver"  value="$WebConf_IP"/>            
		<generalparameter id="loglevel"  value="$WebConf_LogLevel"/>
		<generalparameter id="interval"  value="20"/>
        </general>
	<servers>
	<!-- TYPE REQUEST=0 CONNECT=1 -->
!


## Parte de servicios a arrancar

if [ -f /usr/local/bin/webconferencebase ]
then
cat >> $1/config/dcswatch-config.xml 2>/dev/null   <<!
		<server name="Webconference"  command="/usr/local/bin/webconferencebase"  ip="$WebConf_IP" numretries="3" port="443" type="0" />
!
fi

# 2009-01-13 restart del openfire
#cat >> $1/config/dcswatch-config.xml 2>/dev/null   <<!
#		<server name="Openfire"  command="service openfire restart"  ip="$v_ipTwo" numretries="200" port="5222" type="1" />
#!

cat >> $1/config/dcswatch-config.xml 2>/dev/null   <<!
                <server name="Openfire"  command="service openfire restart"  ip="$WebConf_IP" numretries="200" port="5222" type="1" />
!



cat >> $1/config/dcswatch-config.xml 2>/dev/null   <<!
	</servers>
</configuration>
!

chown 0744$1/config/dcswatch-config.xml >/dev/null 2>&1  

CP -f $1/config/dcswatch-config.xml /etc/dcswatch-config.xml
chmod 0744 /etc/dcswatch-config.xml
}

DumpConfigFileRemote()
{
	if [ ! -d "$1/config" ]
	then
		read respuesta
		if [ "$respuesta" = y ] || [ "$respuesta" = Y ]
		then
			mkdir -p $1/config
		elif [ "$respuesta" = n ] || [ "$respuesta" = N ]
		then
			exit 1
		fi
	fi
f=`date '+%Y-%m-%d %H:%M'`

## Parte general

cat > $1/config/dcswatch-config.xml 2>/dev/null  <<!
<!-- ($f) Configuration file generated by bin/DcsWatchInstall -->
<configuration>
        <general>
                <!-- Where we listen-->
                <generalparameter id="portmaster"  value="$WebConf_ControlPort"/>
		<!-- Our address-->
                <generalparameter id="ipcontrolmaster"  value="$WebConf_ControlIP"/>
		<!-- Our control IF. Is the same this MACHINE boots on -->
		<generalparameter id="ethcontrol"  value="$WebConf_ControlIF"/>

                <!-- Where our dcswatch peer listens -->
                <generalparameter id="portmirror"  value="$WebConf_PartnerPort"/>
                <!-- peer dcswatch address -->
                <generalparameter id="ipcontrolmirror"  value="$WebConf_PartnerIP"/>

                <!-- Public IP to launch public services -->
                <generalparameter id="ipserver"  value="$WebConf_PublicIP"/>

                <!-- IF for public services -->
                <generalparameter id="ethwebconference"  value="$WebConf_PublicIF"/>

                <!-- Log level -->
                <generalparameter id="loglevel"  value="DEBUG"/>
        </general>
	<servers>
	<!-- TYPE REQUEST=0 CONNECT=1 -->
!

# Parte de servicios a arrancar
if [ ! -z "$dcsPath" ]
then
cat >> $1/config/dcswatch-config.xml 2>/dev/null   <<!
		<server name="Webconference"  command="$dcsPath"  port="443" type="0" />
!
fi

if [ ! -z "$abmPath" ]
then
cat >> $1/config/dcswatch-config.xml 2>/dev/null   <<!
		<server name="ABMService"  command="$abmPath"  port="8787" type="1" />
!
fi

cat >> $1/config/dcswatch-config.xml 2>/dev/null   <<!
	</servers>
</configuration>
!

chown $WebConf_User $1/config/dcswatch-config.xml  >> $pinstall/DcsWatchInstall.log 2>&1

CP -f $1/config/dcswatch-config.xml /etc/dcswatch-config.xml
chmod 0744 /etc/dcswatch-config.xml
}

CrearScript()
{
cat > /etc/init.d/dcswatch  2>/dev/null  <<!
#!/bin/bash

#. /etc/init.d/functions

LD_LIBRARY_PATH=$1/lib:$1/bin:/lib:/usr/lib:/usr/local/lib
export LD_LIBRARY_PATH

case  "\$1" in
  start)
        echo
	$1/bin/dcswatch -s

	sleep 2
	variable="\`killall -q -0 dcswatch\`"
	if [ "\$?" = 1 ]
	then
        	echo -e "\t OK\n"
	fi
        echo
        ;;
  stop)
        echo
        echo -n "Shutting down DcsWatch service: " 
	$1/bin/dcswatch -k
	
        echo
        ;;
  status)
        # CHKSK
        echo
        variable="\`killall -q -0 dcswatch\`"
	if [ "\$?" = 0 ]
	then
        	echo "DcsWatch daemon is running"
	else
		echo "DcsWatch daemon is stopped"
	fi
        echo
        ;;
  restart)
        echo
        "\$0" stop
        "\$0" start
        "\$0" status
        echo
        ;;
  *)
        echo $"Usage: dcswatch {start|stop|status|restart}"
        exit 1
esac

exit 1

!
#chmod 0744 $1/dcswatch

#CP -f $1/dcswatch /etc/init.d/
chmod 0755 /etc/init.d/dcswatch

}

MakeCentinell()
{
	fecha=`date '+%Y-%m-%d %H:%M'`
}

TestCentinell()
{
	# Mira si existe el centinela, y si no el directorio

	if [ -f  $1/.dialcom_centinell ]
	then
		return 0
	fi

	if [ -d $1 ]
	then
		return 1
	fi

	return 2
}

DetectServices()
{
	if [ -f "/etc/init.d/dcs" ]
	then
		if [ "$variable" = y ]
		then
			dcsPath="/etc/init.d/dcs start"
		fi
	else
		if [ -f "/usr/local/bin/webconferencebase" ]
		then
			if [ "$variable" = y ]
			then
				dcsPath="/usr/local/bin/webconferencebase"
			fi
		fi
	fi


	if [ -f "/etc/init.d/abm" ]
	then
		ECHO -e "Advanced Bandwith Management (ABM) for DCS detected in this machine"
		strask "Do you want it to be watched by dcswatch? [y/n]: " 
		if [ "$variable" = y ]
		then
			abmPath="/etc/init.d/abm start"
		fi
	else
		if [ -f "/usr/local/bin/abmd" ]
		then
			ECHO -e "Advanced Bandwith Management for DCS detected in this machine"
			strask "Do you want it to be watched by dcswatch? [y/n]:" 
			if [ "$variable" = y ]
			then
				abmPath="/usr/local/bin/abmd"
			fi
		fi
	fi
	
}
TestDir()
{
q=n
	if [ ! -e  $1/bin ]
	then
		ECHO -e "bin directory not found"
		q=y
	fi

	if [ ! -e  $1/config ]
	then
		ECHO -e "config directory not found"
		q=y
	fi

	if [ ! -e  $1/lib ]
	then
		ECHO -e "lib directory not found"
		q=y
	fi

	if [ ! -e  $1/temp ]
	then
		ECHO -e "temp directory not found"
		q=y
	fi

	if [ "$q" = y ]
	then
		ECHO""
		ECHO -e "Directory $1 hasn't a valid installation"
		ECHO""
		exit 1
	fi
}

DoDcsWatchLinks()
{
# En los SuSE no hay /etc/rcX.d.Los rcX.d estan dentro de /etc/rc.d 
	if [ -d "/etc/rc.d" ]
	then
		if [ -d "/etc/rc.d/rc0.d" ]
		then
			LN -fs /etc/init.d/dcswatch /etc/rc.d/rc0.d/K19dcswatch
		fi

		if [ -d "/etc/rc.d/rc1.d" ]
		then
			LN -fs /etc/init.d/dcswatch /etc/rc.d/rc1.d/K19dcswatch
		fi

		if [ -d "/etc/rc.d/rc2.d" ]
		then
			LN -fs /etc/init.d/dcswatch /etc/rc.d/rc2.d/K19dcswatch
		fi
		
		if [ -d "/etc/rc.d/rc3.d" ]
		then
			LN -fs /etc/init.d/dcswatch /etc/rc.d/rc3.d/S90dcswatch
		fi

		if [ -d "/etc/rc.d/rc4.d" ]
		then
			LN -fs /etc/init.d/dcswatch /etc/rc.d/rc4.d/S90dcswatch
		fi

		if [ -d "/etc/rc.d/rc5.d" ]
		then
			LN -fs /etc/init.d/dcswatch /etc/rc.d/rc5.d/S90dcswatch
		fi
	fi

	if [ -d "/etc/rc0.d" ]
	then
		LN -fs /etc/init.d/dcswatch /etc/rc0.d/K19dcswatch
	fi

	if [ -d "/etc/rc1.d" ]
	then
		LN -fs /etc/init.d/dcswatch /etc/rc1.d/K19dcswatch
	fi

	if [ -d "/etc/rc2.d" ]
	then
		LN -fs /etc/init.d/dcswatch /etc/rc2.d/K19dcswatch
	fi
		
	if [ -d "/etc/rc3.d" ]
	then
		LN -fs /etc/init.d/dcswatch /etc/rc3.d/S90dcswatch
	fi

	if [ -d "/etc/rc4.d" ]
	then
		LN -fs /etc/init.d/dcswatch /etc/rc4.d/S90dcswatch
	fi

	if [ -d "/etc/rc5.d" ]
	then
		LN -fs /etc/init.d/dcswatch /etc/rc5.d/S90dcswatch
	fi
}


Instalar()
{
pregunta=n
NuevoIni=1
	
	respuesta=y
	if [ "$respuesta" = y ] || [ "$respuesta" = Y ]
	then
		pinstall=$1
	fi

	# Miramos que existan los directorios necesarios donde nos han dicho
	# TestDir $pinstall

 
	
	AskLogLevel
	AskIP		
	
	DetectServices

	DumpConfigFileSimple $pinstall

	CrearScript /usr/local/
	

	DoDcsWatchLinks

	/etc/init.d/dcswatch start -s


	exit 0
}

###########################################################
#	Instalacion del sistema ABM
###########################################################
	
	package=DcsWatch

	touch $pinstall/DcsWatchInstall.log

	#Buscamos donde han instalado desde RPM 
	path=`rpm -ql $package | grep dcswatch`
	#ECHO $path

	version=`rpm -q --queryformat %{VERSION} $package`
	release=`rpm -q --queryformat %{RELEASE} $package`
	os=`rpm -q --queryformat %{OS} $package`
	arch=`rpm -q --queryformat %{ARCH} $package`
	buildtime=`rpm -q --queryformat %{BUILDTIME} $package`
	installprefix=`rpm -q --queryformat %{INSTALLPREFIX} $package`

	#Quitamos ulima ocurrencia de bin/ en adelante
	aux=${path/%bin*/}
	#ECHO $aux

	# Esto puede pasar si despues de ejecutar el rpm -i
	# nos lo borran y luego ejecutan este script

	# if [ -z "$aux" ]
	# then
	# 	ECHO  "DcsWatch System is not installed on this machine"
	# 	ECHO  "Install its $package package first."
	# 	ECHO ""
	# 	exit 1
	# fi


	Instalar $aux

	# Si todo ha ido bien creamos ficheros testigo para saber que 
	# lo ha instalado webconference

	MakeCentinell $pinstall 
	
	
	exit $?
